set.seed(135)
x <- tssim::sim_daily(N=5, sd=5)$original
Sys.setenv("JAVA_HOME"="C:\\Workspace\\Java\\JDK\\jdk-17.0.3+7")
.libPaths("C:\\Workspace\\R\\JD_lib")
library(rjd3highfreq)
set.seed(135)
x <- tssim::sim_daily(N=5, sd=5)$original
xreg <- rnorm(length(x))
model <- fractionalAirlineEstimation(y=x, periods=c(7, 365.25), x=xreg)
model
head(model$$model$linearized)
head(model$model$linearized)
head(x)
set.seed(135)
x <- tssim::sim_daily(N=5, sd=5)$original
xreg <- cbind(rnorm(length(x)), rnorm(length(x)))
model <- fractionalAirlineEstimation(y=x, periods=c(7, 365.25), x=xreg)
head(model$$model$linearized)
head(model$model$linearized)
head(x)
xlin <- xts::xts(model$model$linearized, zoo::index(x))
cfac <- x/xlin
plot(cfac)
set.seed(135)
x <- tssim::sim_daily(N=5, sd=5)$original
xreg <- cbind(rbinom(length(x), size=1, prob=0.02), rbinom(length(x), size=1, prob=0.02))
model <- fractionalAirlineEstimation(y=x, periods=c(7, 365.25), x=xreg)
xlin <- xts::xts(model$model$linearized, zoo::index(x))
cfac <- x/xlin
plot(cfac)
library(rjd3stl)
Log=TRUE
swindow7=13
# S7 ----------------------------------------------------------------------
s7_model <- stl(xlin, period=7, multiplicative=Log, swindow=swindow7)
head(s7_model$decomposition)
s7_model$decomposition$s
head(cfac)
dsa::ts2xts
dsa::xts2ts
delete_29 <- function(x) {
x[format(zoo::index(x), "%m-%d") == "02-29"] <- NA
x <- x[!is.na(x)]
}
source("R:/Zentrale/Projekte/FB-S/Daten/DA/JDemetra/Anwendungen/DSA2/MVP_auxiliary.R")
# s365 --------------------------------------------------------------------
s7x <- delete_29(s7)
s7 <- xts::xts(s7_model$decomposition[,2], zoo::index(x)) # seasonally adjusted
sfac7 <- xts::xts(s7_model$decomposition[,4], zoo::index(x)) # seasonal factor
# s365 --------------------------------------------------------------------
s7x <- delete_29(s7)
s7x
length(s7)
length(s7x)
swindow31=13
swindow365=13
??spline
dsa::Descaler
dsa::Scaler
source("R:/Zentrale/Projekte/FB-S/Daten/DA/JDemetra/Anwendungen/DSA2/MVP_auxiliary.R")
Descaler(x, Log=Log)
s365
s365 <- xts::xts(s365_model$decomposition[,2], zoo::index(s7x)) # seasonally adjusted
s365 <- xts::merge.xts(s365, x)[,1] # Add back Feb 29
s365 <- zoo::na.spline(s365) # DO: Maybe use rjd3bench::cubicspline
s365 <- xts::xts(s365_model$decomposition[,2], zoo::index(s7x)) # seasonally adjusted
s365_model <- stl(s7x, period=365, multiplicative=Log, swindow=swindow365)
s365 <- xts::xts(s365_model$decomposition[,2], zoo::index(s7x)) # seasonally adjusted
s365 <- xts::merge.xts(s365, x)[,1] # Add back Feb 29
s365 <- zoo::na.spline(s365) # DO: Maybe use rjd3bench::cubicspline
head(s365)
Scaler(x)-Scaler(s365)
sfac365 <- Descaler(Scaler(x, Log=Log)-Scaler(s365, Log=Log), Log=Log)
head(s365)
head(sfac365)
x[1]/s365[1]
## Function
dsa2 <- function(x, xreg=NULL, Log=TRUE, swindow7=13, fill29=c("sa", "s")[1]) {
# RegARIMA ----------------------------------------------------------------
model <- fractionalAirlineEstimation(y=x, periods=c(7, 365.25), x=xreg)
xlin <- xts::xts(model$model$linearized, zoo::index(x)) # calendar adjusted
cfac <- x/xlin # calendar factor
# s7 ----------------------------------------------------------------------
s7_model <- stl(xlin, period=7, multiplicative=Log, swindow=swindow7)
s7 <- xts::xts(s7_model$decomposition[,2], zoo::index(x)) # seasonally adjusted
sfac7 <- xts::xts(s7_model$decomposition[,4], zoo::index(x)) # seasonal factor
# s365 --------------------------------------------------------------------
s7x <- delete_29(s7)
s365_model <- stl(s7x, period=365, multiplicative=Log, swindow=swindow365)
if (fill29=="sa") { # How should the Feb 29 be filled up?
s365 <- xts::xts(s365_model$decomposition[,2], zoo::index(s7x)) # seasonally adjusted
s365 <- xts::merge.xts(s365, x)[,1] # Add back Feb 29
s365 <- zoo::na.spline(s365) # DO: Maybe use rjd3bench::cubicspline
sfac365 <- Descaler(Scaler(x, Log=Log)-Scaler(s365, Log=Log), Log=Log)
}
if (fill29="s") {
sfac365 <- xts::xts(s365_model$decomposition[,4], zoo::index(s7x)) # seasonal factor
sfac365 <- xts::merge.xts(sfac365, x)[,1] # Add back Feb 29
sfac365 <- zoo::na.spline(sfac365) # DO: Maybe use rjd3bench::cubicspline
s365 <- Descaler(Scaler(x, Log=Log)-Scaler(sfac365, Log=Log), Log=Log)
}
# Output ------------------------------------------------------------------
factors <- xts::merge.xts(cfac, sfac7, sfac365)
series <- xts::merge.xts(xlin, s7, s365)
colnames(series) <- c("cal_adj", "cal_s7_adj", "sa")
out <- list(series, factors, regarima=model, stl=list(s7_model, s365_model))
return(out)
}
## Function
dsa2 <- function(x, xreg=NULL, Log=TRUE, swindow7=13, fill29=c("sa", "s")[1]) {
# RegARIMA ----------------------------------------------------------------
model <- fractionalAirlineEstimation(y=x, periods=c(7, 365.25), x=xreg)
xlin <- xts::xts(model$model$linearized, zoo::index(x)) # calendar adjusted
cfac <- x/xlin # calendar factor
# s7 ----------------------------------------------------------------------
s7_model <- stl(xlin, period=7, multiplicative=Log, swindow=swindow7)
s7 <- xts::xts(s7_model$decomposition[,2], zoo::index(x)) # seasonally adjusted
sfac7 <- xts::xts(s7_model$decomposition[,4], zoo::index(x)) # seasonal factor
# s365 --------------------------------------------------------------------
s7x <- delete_29(s7)
s365_model <- stl(s7x, period=365, multiplicative=Log, swindow=swindow365)
if (fill29=="sa") { # How should the Feb 29 be filled up?
s365 <- xts::xts(s365_model$decomposition[,2], zoo::index(s7x)) # seasonally adjusted
s365 <- xts::merge.xts(s365, x)[,1] # Add back Feb 29
s365 <- zoo::na.spline(s365) # DO: Maybe use rjd3bench::cubicspline
sfac365 <- Descaler(Scaler(x, Log=Log)-Scaler(s365, Log=Log), Log=Log)
}
if (fill29=="s") {
sfac365 <- xts::xts(s365_model$decomposition[,4], zoo::index(s7x)) # seasonal factor
sfac365 <- xts::merge.xts(sfac365, x)[,1] # Add back Feb 29
sfac365 <- zoo::na.spline(sfac365) # DO: Maybe use rjd3bench::cubicspline
s365 <- Descaler(Scaler(x, Log=Log)-Scaler(sfac365, Log=Log), Log=Log)
}
# Output ------------------------------------------------------------------
factors <- xts::merge.xts(cfac, sfac7, sfac365)
series <- xts::merge.xts(xlin, s7, s365)
colnames(series) <- c("cal_adj", "cal_s7_adj", "sa")
out <- list(series, factors, regarima=model, stl=list(s7_model, s365_model))
return(out)
}
## Function
dsa2 <- function(x, xreg=NULL, Log=TRUE, swindow7=13, swindow365=13, fill29=c("sa", "s")[1]) {
# RegARIMA ----------------------------------------------------------------
model <- fractionalAirlineEstimation(y=x, periods=c(7, 365.25), x=xreg)
xlin <- xts::xts(model$model$linearized, zoo::index(x)) # calendar adjusted
cfac <- x/xlin # calendar factor
# s7 ----------------------------------------------------------------------
s7_model <- stl(xlin, period=7, multiplicative=Log, swindow=swindow7)
s7 <- xts::xts(s7_model$decomposition[,2], zoo::index(x)) # seasonally adjusted
sfac7 <- xts::xts(s7_model$decomposition[,4], zoo::index(x)) # seasonal factor
# s365 --------------------------------------------------------------------
s7x <- delete_29(s7)
s365_model <- stl(s7x, period=365, multiplicative=Log, swindow=swindow365)
if (fill29=="sa") { # How should the Feb 29 be filled up?
s365 <- xts::xts(s365_model$decomposition[,2], zoo::index(s7x)) # seasonally adjusted
s365 <- xts::merge.xts(s365, x)[,1] # Add back Feb 29
s365 <- zoo::na.spline(s365) # DO: Maybe use rjd3bench::cubicspline
sfac365 <- Descaler(Scaler(x, Log=Log)-Scaler(s365, Log=Log), Log=Log)
}
if (fill29=="s") {
sfac365 <- xts::xts(s365_model$decomposition[,4], zoo::index(s7x)) # seasonal factor
sfac365 <- xts::merge.xts(sfac365, x)[,1] # Add back Feb 29
sfac365 <- zoo::na.spline(sfac365) # DO: Maybe use rjd3bench::cubicspline
s365 <- Descaler(Scaler(x, Log=Log)-Scaler(sfac365, Log=Log), Log=Log)
}
# Output ------------------------------------------------------------------
factors <- xts::merge.xts(cfac, sfac7, sfac365)
series <- xts::merge.xts(xlin, s7, s365)
colnames(series) <- c("cal_adj", "cal_s7_adj", "sa")
out <- list(series, factors, regarima=model, stl=list(s7_model, s365_model))
return(out)
}
test <- dsa2(x)
## Function
dsa2 <- function(x, xreg=NULL, Log=TRUE, swindow7=13, swindow365=13, fill29=c("sa", "s")[1]) {
# RegARIMA ----------------------------------------------------------------
model <- fractionalAirlineEstimation(y=x, periods=c(7, 365.25), x=xreg)
xlin <- xts::xts(model$model$linearized, zoo::index(x)) # calendar adjusted
cfac <- x/xlin # calendar factor
# s7 ----------------------------------------------------------------------
s7_model <- stl(xlin, period=7, multiplicative=Log, swindow=swindow7)
s7 <- xts::xts(s7_model$decomposition[,2], zoo::index(x)) # seasonally adjusted
sfac7 <- xts::xts(s7_model$decomposition[,4], zoo::index(x)) # seasonal factor
# s365 --------------------------------------------------------------------
s7x <- delete_29(s7)
s365_model <- stl(s7x, period=365, multiplicative=Log, swindow=swindow365)
if (fill29=="sa") { # How should the Feb 29 be filled up?
s365 <- xts::xts(s365_model$decomposition[,2], zoo::index(s7x)) # seasonally adjusted
s365 <- xts::merge.xts(s365, x)[,1] # Add back Feb 29
s365 <- zoo::na.spline(s365) # DO: Maybe use rjd3bench::cubicspline
sfac365 <- Descaler(Scaler(x, Log=Log)-Scaler(s365, Log=Log), Log=Log)
}
if (fill29=="s") {
sfac365 <- xts::xts(s365_model$decomposition[,4], zoo::index(s7x)) # seasonal factor
sfac365 <- xts::merge.xts(sfac365, x)[,1] # Add back Feb 29
sfac365 <- zoo::na.spline(sfac365) # DO: Maybe use rjd3bench::cubicspline
s365 <- Descaler(Scaler(x, Log=Log)-Scaler(sfac365, Log=Log), Log=Log)
}
# Output ------------------------------------------------------------------
factors <- xts::merge.xts(cfac, sfac7, sfac365)
series <- xts::merge.xts(x, s365, xlin, s7)
colnames(series) <- c("original", "sa","cal_adj", "cal_s7_adj")
out <- list(series, factors, regarima=model, stl=list(s7_model, s365_model))
return(out)
}
test <- dsa2(x)
comp <- dsa::dsa(x, Log=TRUE, s.window1 = 13, s.window2 = NULL, s.window3 = 13, fourier_number = 24)
## Function
dsa2 <- function(x, xreg=NULL, Log=TRUE, swindow7=13, swindow365=13, fill29=c("sa", "s")[1]) {
# RegARIMA ----------------------------------------------------------------
model <- fractionalAirlineEstimation(y=x, periods=c(7, 365.25), x=xreg)
xlin <- xts::xts(model$model$linearized, zoo::index(x)) # calendar adjusted
cfac <- x/xlin # calendar factor
# s7 ----------------------------------------------------------------------
s7_model <- stl(xlin, period=7, multiplicative=Log, swindow=swindow7)
s7 <- xts::xts(s7_model$decomposition[,2], zoo::index(x)) # seasonally adjusted
sfac7 <- xts::xts(s7_model$decomposition[,4], zoo::index(x)) # seasonal factor
# s365 --------------------------------------------------------------------
s7x <- delete_29(s7)
s365_model <- stl(s7x, period=365, multiplicative=Log, swindow=swindow365)
if (fill29=="sa") { # How should the Feb 29 be filled up?
s365 <- xts::xts(s365_model$decomposition[,2], zoo::index(s7x)) # seasonally adjusted
s365 <- xts::merge.xts(s365, x)[,1] # Add back Feb 29
s365 <- zoo::na.spline(s365) # DO: Maybe use rjd3bench::cubicspline
sfac365 <- Descaler(Scaler(x, Log=Log)-Scaler(s365, Log=Log), Log=Log)
}
if (fill29=="s") {
sfac365 <- xts::xts(s365_model$decomposition[,4], zoo::index(s7x)) # seasonal factor
sfac365 <- xts::merge.xts(sfac365, x)[,1] # Add back Feb 29
sfac365 <- zoo::na.spline(sfac365) # DO: Maybe use rjd3bench::cubicspline
s365 <- Descaler(Scaler(x, Log=Log)-Scaler(sfac365, Log=Log), Log=Log)
}
# Output ------------------------------------------------------------------
factors <- xts::merge.xts(cfac, sfac7, sfac365)
series <- xts::merge.xts(x, s365, xlin, s7)
colnames(series) <- c("original", "sa","cal_adj", "cal_s7_adj")
out <- list(series=series, factors=factors, regarima=model, stl=list(s7_model, s365_model))
return(out)
}
test <- dsa2(x)
bbkplot::tsplot(merge(test$series[,1:2], comp$output$seas_adj), colors=c("black", "green", "darkgray"))
bbkplot::tsplot(merge(test$series[,1:2], comp$output$seas_adj), color=c("black", "green", "darkgray"))
bbkplot::tsplot(merge(x, comp$output$seas_adj[zoo::index(x)], test$series[,2]), color=c("black", "darkgrey", "green"))
model$model$bcov
model$estimation
model$model
model$mode$variables
x2 <- x
x2[3] <- x2[3]*2
plot(x)
plot(x2)
test <- dsa2(x2)
model2 <- fractionalAirlineEstimation(y=x2, periods=c(7, 365.25), x=xreg)
bbkplot::tsplot(merge(x2, comp$output$seas_adj[zoo::index(x)], test$series[,2]), color=c("black", "darkgrey", "green"))
model2$model$variables
model2 <- fractionalAirlineEstimation(y=x2, periods=c(7, 365.25), x=xreg, outliers=c("AO"))
model2$model$variables
model2$model$bcov
model2$model$b
model2$model$variables
model2$estimation$parameters
# Basic settings ----------------------------------------------------------
Sys.setenv("JAVA_HOME"="C:\\Workspace\\Java\\JDK\\jdk-17.0.3+7")
.libPaths("C:\\Workspace\\R\\JD_lib")
library(rjd3highfreq)
library(rjd3stl)
set.seed(135)
x <- tssim::sim_daily(N=5, sd=5)$original # Simulated time series
xreg <- cbind(rbinom(length(x), size=1, prob=0.02), rbinom(length(x), size=1, prob=0.02)) # Simulated dummy-style regressor
source("R:/Zentrale/Projekte/FB-S/Daten/DA/JDemetra/Anwendungen/DSA2/MVP_auxiliary.R")
# MVP ---------------------------------------------------------------------
## Settings
Log=TRUE
swindow7=13
swindow31=13
swindow365=13
## Function
dsa2 <- function(x, xreg=NULL, Log=TRUE, swindow7=13, swindow365=13, fill29=c("sa", "s")[1]) {
# RegARIMA ----------------------------------------------------------------
model <- fractionalAirlineEstimation(y=x, periods=c(7, 365.25), x=xreg)
xlin <- xts::xts(model$model$linearized, zoo::index(x)) # calendar adjusted
cfac <- x/xlin # calendar factor
# s7 ----------------------------------------------------------------------
s7_model <- stl(xlin, period=7, multiplicative=Log, swindow=swindow7)
s7 <- xts::xts(s7_model$decomposition[,2], zoo::index(x)) # seasonally adjusted
sfac7 <- xts::xts(s7_model$decomposition[,4], zoo::index(x)) # seasonal factor
# s365 --------------------------------------------------------------------
s7x <- delete_29(s7)
s365_model <- stl(s7x, period=365, multiplicative=Log, swindow=swindow365)
if (fill29=="sa") { # How should the Feb 29 be filled up?
s365 <- xts::xts(s365_model$decomposition[,2], zoo::index(s7x)) # seasonally adjusted
s365 <- xts::merge.xts(s365, x)[,1] # Add back Feb 29
s365 <- zoo::na.spline(s365) # DO: Maybe use rjd3bench::cubicspline
sfac365 <- Descaler(Scaler(x, Log=Log)-Scaler(s365, Log=Log), Log=Log)
}
if (fill29=="s") {
sfac365 <- xts::xts(s365_model$decomposition[,4], zoo::index(s7x)) # seasonal factor
sfac365 <- xts::merge.xts(sfac365, x)[,1] # Add back Feb 29
sfac365 <- zoo::na.spline(sfac365) # DO: Maybe use rjd3bench::cubicspline
s365 <- Descaler(Scaler(x, Log=Log)-Scaler(sfac365, Log=Log), Log=Log)
}
# Re-introduce outlier effects --------------------------------------------
# Output ------------------------------------------------------------------
factors <- xts::merge.xts(cfac, sfac7, sfac365)
series <- xts::merge.xts(x, s365, xlin, s7)
colnames(series) <- c("original", "sa","cal_adj", "cal_s7_adj")
out <- list(series=series, factors=factors, regarima=model, stl=list(s7_model, s365_model))
return(out)
}
system.time({
test <- dsa2(x)
})
system.time({
comp <- dsa::dsa(x, Log=TRUE, s.window1 = 13, s.window2 = NULL, s.window3 = 13, fourier_number = 24)
})
bbkplot::tsplot(merge(x, comp$output$seas_adj[zoo::index(x)], test$series[,2]), color=c("black", "darkgrey", "green"))
# Basic settings ----------------------------------------------------------
Sys.setenv("JAVA_HOME"="C:\\Workspace\\Java\\JDK\\jdk-17.0.3+7")
.libPaths("C:\\Workspace\\R\\JD_lib")
library(rjd3highfreq)
library(rjd3stl)
set.seed(135)
x <- tssim::sim_daily(N=5, sd=5)$original # Simulated time series
xreg <- cbind(rbinom(length(x), size=1, prob=0.02), rbinom(length(x), size=1, prob=0.02)) # Simulated dummy-style regressor
source("R:/Zentrale/Projekte/FB-S/Daten/DA/JDemetra/Anwendungen/DSA2/MVP_auxiliary.R")
?fractionalAirlineEstimation
Sys.setenv("JAVA_HOME"="C:\\Workspace\\Java\\JDK\\jdk-17.0.3+7")
.libPaths("C:\\Workspace\\R\\JD_lib")
library(rjd3highfreq)
library(rjd3stl)
set.seed(135)
all <- tssim::sim_daily(N=5, sd=5)
x <- all$original# Simulated time series
#x[3] <- x[3]*2
xreg <- xts::xts(cbind(rbinom(length(x), size=1, prob=0.02), rbinom(length(x), size=1, prob=0.02)), zoo::index(x)) # Simulated dummy-style regressor
xregf <- xts::xts(cbind(rbinom(365, size=1, prob=0.02), rbinom(365, size=1, prob=0.02)), seq.Date(from=end(xreg)+1, by="days", length.out=365)) # For dsa::dsa
source("R:/Zentrale/Projekte/FB-S/Daten/DA/JDemetra/Anwendungen/DSA2/MVP_auxiliary.R")
bbkutils::install_packages(rjd3highfreq)
bbkutils::install_packages("rjd3highfreq")
